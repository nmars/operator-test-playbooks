---
  # This playbook creates a pod to run a given container image.
  #
  # The expected result is for the pod to create a file named
  #  <pod-name>.log containing the output of 'ls /etc/yum.repos.d'.
  #
  # If errors are encountered <pod-name>.json is created for debugging
  # and will contain the output of 'oc get pod <pod-name> -o json.'
- name: Run a container to determine if it is UBI-based
  hosts: all
  become: false
  gather_facts: false

  vars:
    openshift_namespace: "test-operator"
    work_dir: "{{ lookup('env', 'WORKSPACE') }}"
    oc_bin_path: "oc"
    pod_name: "cvp-ubi-check"

  tasks:
  - name: "Create the spec file"
    template:
      src: "ubi-check-pod.yml.j2"
      dest: "{{ work_dir }}/{{ pod_name }}.yml"

  - name: "Display the spec file"
    shell: "cat {{ work_dir }}/{{ pod_name }}.yml"
    register: pod_yaml

  - debug:
      msg: "Pod yaml contents: {{ pod_yaml.stdout }}"

  - name: "Create pod"
    shell: "{{ oc_bin_path }} create -f {{ work_dir }}/{{ pod_name }}.yml -n {{ openshift_namespace }}"
    register: create_pod
    retries: 10
    delay: 10
    until: create_pod.rc == 0
    ignore_errors: true
    environment:
      KUBECONFIG: "{{ kubeconfig_path }}"

  - name: "Wait for pod to complete"
    shell: "{{ oc_bin_path }} get pod {{ pod_name }} -o jsonpath={.status.phase} -n {{ openshift_namespace }}"
    register: pod_status
    retries: 30
    delay: 10
    until: pod_status.stdout == "Succeeded"
    ignore_errors: true
    environment:
      KUBECONFIG: "{{ kubeconfig_path }}"
    when: create_pod.rc == 0

  - name: "Inject kube_objects on OpenShift cluster for Operator certification"
    block:
    - name: "Inject openshift kube_objects"
      include_role:
        name: inject_openshift_kube_objects
      vars:
        rsa_private_key: "{{ lookup('env', 'HOME') }}/.ssh/private_key"
    when:
      - kube_objects is defined
      - kube_objects != "N/A"
      - kube_objects != "null"
      
  - name: "Get debug"
    shell: "{{ oc_bin_path }} get pod {{ pod_name }} -o=json -n {{ openshift_namespace }}"
    register: get_debug
    retries: 10
    delay: 10
    ignore_errors: true
    environment:
      KUBECONFIG: "{{ kubeconfig_path }}"
    when: pod_status.stdout != "Succeeded"

  - name: "Create debug log"
    copy:
      content: "{{ get_debug.stdout | from_json | to_nice_json }}"
      dest: "{{ work_dir }}/{{ pod_name }}.json"
    ignore_errors: true
    when:
      - pod_status.stdout != "Succeeded"
      - get_debug.rc == 0

  - name: "Get command output from container"
    shell: "{{ oc_bin_path }} logs {{ pod_name }} -n {{ openshift_namespace }}"
    register: pod_log
    retries: 10
    delay: 10
    ignore_errors: true
    environment:
      KUBECONFIG: "{{ kubeconfig_path }}"
    when: pod_status.stdout == "Succeeded"

  - name: "Output the pod log to a file"
    copy:
      content: "{{ pod_log.stdout }}"
      dest: "{{ work_dir }}/{{ pod_name }}.log"
    when: pod_log.stdout is defined
    ignore_errors: true

  - name: "Delete the pod"
    shell: "{{ oc_bin_path }} delete pod {{ pod_name }} -n {{ openshift_namespace }}"
    retries: 10
    delay: 10
    ignore_errors: true
    environment:
      KUBECONFIG: "{{ kubeconfig_path }}"

  - name: "Fail if errors encountered"
    fail:
      msg: "Errors encountered running container in pod"
    when: (create_pod.rc != 0) or
          (pod_status is defined and pod_status.stdout != "Succeeded")

